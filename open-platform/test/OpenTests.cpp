#include "open.h"

#include <gtest/gtest.h>

using namespace std;

TEST(Open, OpenWalletGenerate) {
    vector<string> result = OpenWalletGenerate();
    ASSERT_EQ(result.size(), 2);
}

TEST(Open, OpenImportPrivateKey) {
    string privateKey = "0x15e9df2c39a3d2b12f9e72e23cabeaccd2cd25255a816f4d0b30e39188e3ece4";
    string address = "0x83439fA399ceC0B1667dA7e938e080Afd4587f8e";
    auto derivedAddress = OpenImportPrivateKey(privateKey, 1);
    ASSERT_EQ(address, derivedAddress);
}

TEST(Open, OpenSignTransaction) {
    const string dummyReceiverAddress = "0xC37054b3b48C3317082E7ba872d7753D13da4986";
    string privateKey = "0x15e9df2c39a3d2b12f9e72e23cabeaccd2cd25255a816f4d0b30e39188e3ece4";
    string signature = OpenSignTransaction(privateKey, dummyReceiverAddress, "01", 3600000000,
                                           21000, 924400000000000);
    string expectedSignature =
        "f86a8084d693a40082520894c37054b3b48c3317082e7ba872d7753d13da4986870348bca5a160008026a08ab8"
        "4faa987f8c96c7a0e60f7ebbd2c2a40427953358365a04f043b9b6773002a04abac20d02b393c9f76660048681"
        "6e9d35d512a8bc1903553d7e7638ddd35021";
    ASSERT_EQ(expectedSignature, signature);
}

int main(int argc, char** argv) {
    ::testing::InitGoogleTest(&argc, argv);
    int ret = RUN_ALL_TESTS();
    return ret;
}