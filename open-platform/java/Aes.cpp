/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class io_openfuture_api_jni_Aes */
#include <open.h>

#include <iostream>
#include <string>
#include <array>
#include <iostream>
#include <string>
#include <vector>

using namespace std;

#ifndef _Included_io_openfuture_api_jni_Aes
#define _Included_io_openfuture_api_jni_Aes
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     io_openfuture_api_jni_Aes
 * Method:    encryptAes
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_io_openfuture_api_jni_Aes_encryptAes
  (JNIEnv *env, jclass, jstring jData, jstring jPassword) {
      jboolean isCopy;
      const char *convertedValue = (env)->GetStringUTFChars(jData, &isCopy);
      std::string data = convertedValue;
      const char *convertedPasswordValue = (env)->GetStringUTFChars(jPassword, &isCopy);
      std::string password = convertedPasswordValue;
      string encrypted = OpenAesEncryptCtr(data, password);
      return env->NewStringUTF(encrypted.c_str());
}

/*
 * Class:     io_openfuture_api_jni_Aes
 * Method:    decryptAes
 * Signature: (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_io_openfuture_api_jni_Aes_decryptAes
  (JNIEnv *env, jclass, jstring jEncryptedData, jstring jPassword){
      jboolean isCopy;
      const char *convertedEncryptedDataValue = (env)->GetStringUTFChars(jEncryptedData, &isCopy);
      std::string encryptedData = convertedEncryptedDataValue;
      const char *convertedPasswordValue = (env)->GetStringUTFChars(jPassword, &isCopy);
      std::string password = convertedPasswordValue;
      string decrypted = OpenAesEncryptCtr(encryptedData, password);
      return env->NewStringUTF(decrypted.c_str());
}
#ifdef __cplusplus
}
#endif
#endif
