/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#include <TrustWalletCore/TWCoinType.h>
#include <TrustWalletCore/TWAnySigner.h>
#include <TrustWalletCore/TWCoinTypeConfiguration.h>
#include <TrustWalletCore/TWHDWallet.h>
#include <TrustWalletCore/TWPrivateKey.h>
#include <TrustWalletCore/TWString.h>

#include <iostream>
/* Header for class io_openfuture_wallet_jni_HDWallet */

#ifndef _Included_io_openfuture_wallet_jni_HDWallet
#define _Included_io_openfuture_wallet_jni_HDWallet
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     io_openfuture_wallet_jni_HDWallet
 * Method:    nativeCreate
 * Signature: (ILjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_io_openfuture_wallet_jni_HDWallet_nativeCreate
    (JNIEnv *, jclass, jint, jstring) {
    // Create a new multi-coin HD wallet, with new recovery phrase (mnemonic)
    std::cout << "Creating a new HD wallet ... ";
    TWHDWallet* walletNew = TWHDWalletCreate(128, TWStringCreateWithUTF8Bytes(""));
    std::cout << "done." << std::endl;
    std::cout << "Secret mnemonic for new wallet: '";
    std::cout << TWStringUTF8Bytes(TWHDWalletMnemonic(walletNew)) << "'." << std::endl;
    TWHDWalletDelete(walletNew);
}

/*
 * Class:     io_openfuture_wallet_jni_HDWallet
 * Method:    getAddressForCoin
 * Signature: (Lio/openfuture/wallet/jni/CoinType;)V
 */
JNIEXPORT void JNICALL Java_io_openfuture_wallet_jni_HDWallet_getAddressForCoin
    (JNIEnv *, jclass, jobject){
    std::cout << "Creating a new HD wallet ... ";
    TWHDWallet* newWallet = TWHDWalletCreate(128, TWStringCreateWithUTF8Bytes(""));
    std::cout << "Have done." << std::endl;
    std::cout << "Secret mnemonic for new wallet: '";
    std::cout << TWStringUTF8Bytes(TWHDWalletMnemonic(newWallet)) << "'." << std::endl;
    TWHDWalletDelete(newWallet);

    // coin type: we use Ethereum

    const TWCoinType coinType = TWCoinType::TWCoinTypeEthereum; // TWCoinTypeBitcoin, TWCoinTypeEthereum
    std::cout << "Working with coin: " <<
        TWStringUTF8Bytes(TWCoinTypeConfigurationGetName(coinType)) << " " <<
        TWStringUTF8Bytes(TWCoinTypeConfigurationGetSymbol(coinType)) << std::endl;
    
    // Derive default address.
    std::cout << "Obtaining default address ... ";
    std::string address = TWStringUTF8Bytes(TWHDWalletGetAddressForCoin(newWallet, coinType));
    std::cout << " done." << std::endl;
    std::cout << "Default address:          '" << address << "'" << std::endl;
}

#ifdef __cplusplus
}
#endif
#endif
